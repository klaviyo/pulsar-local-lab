global:
  scrape_interval: 10s
  evaluation_interval: 10s
  external_labels:
    cluster: 'pulsar-upgrade'

rule_files:
  - "/etc/prometheus/rules/*.yml"

scrape_configs:
  # ZooKeeper metrics
  - job_name: 'zookeeper'
    static_configs:
      - targets: ['zookeeper:8000']
    metrics_path: '/metrics'
    scrape_interval: 15s
    scrape_timeout: 5s

  # BookKeeper metrics
  - job_name: 'bookkeeper'
    static_configs:
      - targets:
          - 'bookie-1:8000'
          - 'bookie-2:8000'
          - 'bookie-3:8000'
    metrics_path: '/metrics'
    scrape_interval: 10s
    scrape_timeout: 5s

  # Pulsar Broker metrics
  - job_name: 'pulsar-broker'
    static_configs:
      - targets:
          - 'broker-1:8080'
          - 'broker-2:8080'
    metrics_path: '/metrics/'
    scrape_interval: 10s
    scrape_timeout: 5s
    params:
      format: ['prometheus']

  # Continuous test producer metrics
  - job_name: 'test-producer'
    static_configs:
      - targets: ['continuous-producer:8080']
    metrics_path: '/metrics/'
    scrape_interval: 5s
    scrape_timeout: 3s
    params:
      format: ['prometheus']

  # Continuous test consumer metrics
  - job_name: 'test-consumer'
    static_configs:
      - targets: ['continuous-consumer:8080']
    metrics_path: '/metrics/'
    scrape_interval: 5s
    scrape_timeout: 3s
    params:
      format: ['prometheus']

  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

alerting:
  alertmanagers:
    - static_configs:
        - targets: []

# Upgrade-specific recording rules
recording_rules:
  - name: upgrade.monitoring.rules
    interval: 10s
    rules:
      # Version tracking
      - record: pulsar:component_version
        expr: label_replace(up{job=~"pulsar-broker|bookkeeper"}, "version", "$1", "__meta_docker_container_label_version", "(.+)")

      # Error rate during upgrade
      - record: pulsar:broker_error_rate
        expr: rate(pulsar_broker_load_manager_bundle_assignment_failures_total[1m])

      - record: pulsar:bookie_error_rate
        expr: rate(bookie_server_ADD_ENTRY_REQUEST_failed[1m])

      # Message continuity during upgrade
      - record: pulsar:upgrade_msg_rate_in
        expr: sum(rate(pulsar_broker_in_messages_total{topic="persistent://public/default/upgrade-test-topic"}[1m]))

      - record: pulsar:upgrade_msg_rate_out
        expr: sum(rate(pulsar_broker_out_messages_total{topic="persistent://public/default/upgrade-test-topic"}[1m]))

      # Latency tracking during upgrade
      - record: pulsar:upgrade_publish_latency_p99
        expr: histogram_quantile(0.99, rate(pulsar_broker_publish_latency_bucket{topic="persistent://public/default/upgrade-test-topic"}[1m]))

      - record: pulsar:upgrade_consumer_lag
        expr: pulsar_broker_subscription_back_log{topic="persistent://public/default/upgrade-test-topic",subscription="upgrade-test-sub"}

      # Connection health
      - record: pulsar:broker_connection_count
        expr: pulsar_broker_active_connections

      - record: pulsar:broker_connection_created_rate
        expr: rate(pulsar_broker_connection_created_total_count[1m])

      - record: pulsar:broker_connection_closed_rate
        expr: rate(pulsar_broker_connection_closed_total_count[1m])

  - name: upgrade.health.rules
    interval: 5s
    rules:
      # Component availability
      - record: pulsar:upgrade_broker_up
        expr: up{job="pulsar-broker"}

      - record: pulsar:upgrade_bookie_up
        expr: up{job="bookkeeper"}

      - record: pulsar:upgrade_zk_up
        expr: up{job="zookeeper"}

      # Message loss detection
      - record: pulsar:upgrade_msg_loss_rate
        expr: |
          (
            pulsar:upgrade_msg_rate_in -
            pulsar:upgrade_msg_rate_out
          ) > 0

      # Replication health
      - record: pulsar:upgrade_replication_backlog
        expr: sum(pulsar_broker_replication_backlog) by (instance)

      # Load balancer health during upgrade
      - record: pulsar:upgrade_bundle_split_rate
        expr: rate(pulsar_broker_load_manager_bundle_splits_total[1m])

      - record: pulsar:upgrade_bundle_unload_rate
        expr: rate(pulsar_broker_load_manager_bundle_unloads_total[1m])

  - name: upgrade.performance.rules
    interval: 15s
    rules:
      # Throughput comparison (before/during/after upgrade)
      - record: pulsar:upgrade_throughput_baseline
        expr: avg_over_time(pulsar:upgrade_msg_rate_in[5m])

      - record: pulsar:upgrade_latency_baseline
        expr: avg_over_time(pulsar:upgrade_publish_latency_p99[5m])

      # Resource utilization during upgrade
      - record: pulsar:upgrade_cpu_usage
        expr: rate(container_cpu_usage_seconds_total{name=~"broker-.*|bookie-.*"}[1m]) * 100

      - record: pulsar:upgrade_memory_usage
        expr: container_memory_usage_bytes{name=~"broker-.*|bookie-.*"} / container_spec_memory_limit_bytes{name=~"broker-.*|bookie-.*"} * 100

      - record: pulsar:upgrade_disk_usage
        expr: (container_fs_usage_bytes{name=~"bookie-.*"} / container_fs_limit_bytes{name=~"bookie-.*"}) * 100